<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vee&#39;s blog</title>
  
  <subtitle>make world better !</subtitle>
  <link href="https://vee-zhang.github.io/Vee-blog/atom.xml" rel="self"/>
  
  <link href="https://vee-zhang.github.io/Vee-blog/"/>
  <updated>2021-01-07T15:38:49.697Z</updated>
  <id>https://vee-zhang.github.io/Vee-blog/</id>
  
  <author>
    <name>Vee Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开篇第一章</title>
    <link href="https://vee-zhang.github.io/Vee-blog/2021/01/07/%E5%BC%80%E7%AF%87%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>https://vee-zhang.github.io/Vee-blog/2021/01/07/%E5%BC%80%E7%AF%87%E7%AC%AC%E4%B8%80%E7%AB%A0/</id>
    <published>2021-01-07T08:30:36.000Z</published>
    <updated>2021-01-07T15:38:49.697Z</updated>
    
    <content type="html"><![CDATA[<p>这是Hexo博客的开篇第一章，也意味着我要迈向新的章节了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是Hexo博客的开篇第一章，也意味着我要迈向新的章节了。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建pub.dev私服及上传package</title>
    <link href="https://vee-zhang.github.io/Vee-blog/2021/01/06/%E6%90%AD%E5%BB%BApub-dev%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0package/"/>
    <id>https://vee-zhang.github.io/Vee-blog/2021/01/06/%E6%90%AD%E5%BB%BApub-dev%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0package/</id>
    <published>2021-01-06T08:57:01.000Z</published>
    <updated>2021-01-07T15:38:49.697Z</updated>
    
    <content type="html"><![CDATA[<p>事情的起因是，在工作项目中，一开始只有我一个人研发，为了方便，我封装了一个网络访问层。但是随着团队规模的拓展，陆续加入了其他人，时间紧项目重，所以后续的伙伴没有时间来问我这个框架怎么使用，所以他们直接上手改了我的封装！但是后期架构要求加入oauth2.0机制，所以需要全局处理token的有效认证，并且自动刷新token。为了满足这一需求，我需要重新编写网络层，同时为了避免伙伴修改我的抽象，我想到了本文的主题——搭建个pub.dev私服吧！</p><a id="more"></a><h2 id="server配置"><a href="#server配置" class="headerlink" title="server配置"></a>server配置</h2><p>首先到我的<a href="https://gitee.com/william198824/pub_server">码云</a>clone个项目下来,然后习惯性<code>flutter pub get</code>。</p><p>接下来修改配置，修改<code>pub_server/example/src/example.dart</code>文件,找到<code>argsParser()</code>：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ArgParser argsParser() &#123;</span><br><span class="line">  <span class="keyword">var</span> parser = ArgParser();</span><br><span class="line"></span><br><span class="line">  parser.addOption(<span class="string">&#x27;directory&#x27;</span>,</span><br><span class="line">      abbr: <span class="string">&#x27;d&#x27;</span>, defaultsTo: <span class="string">&#x27;pub_server-repository-data&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//host地址</span></span><br><span class="line">  parser.addOption(<span class="string">&#x27;host&#x27;</span>, abbr: <span class="string">&#x27;h&#x27;</span>, defaultsTo: <span class="string">&#x27;localhost&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//端口号</span></span><br><span class="line">  parser.addOption(<span class="string">&#x27;port&#x27;</span>, abbr: <span class="string">&#x27;p&#x27;</span>, defaultsTo: <span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 运行模式</span></span><br><span class="line">  parser.addFlag(<span class="string">&#x27;standalone&#x27;</span>, abbr: <span class="string">&#x27;s&#x27;</span>, defaultsTo: <span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">return</span> parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我的8080端口已经被jenkies占用了，所以只能把pub的端口改为9090。要注意的是，<strong>host默认是localhost，只支持本机访问</strong>，如果我们要挂到服务上，需要把这里改为<code>0.0.0.0</code>之后，我们才能通过ip或者域名访问服务。</p><p>然后启动服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart example/example.dart -d /tmp/package-db</span><br></pre></td></tr></table></figure><blockquote><p>如果出现「To make the pub client use this repository configure…」表示服务启动成功！</p></blockquote><h2 id="创建测试package"><a href="#创建测试package" class="headerlink" title="创建测试package"></a>创建测试package</h2><p>怎么创建，不说了，这里只贴出yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lk_dio</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">用于来康科技公司的网络请求层封装，包括平台、大脑的接口调用规则和token有效期验证及自动刷新机制。</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">William</span> <span class="string">&lt;自己的邮箱@enn.cn&gt;</span></span><br><span class="line"><span class="attr">homepage:</span> <span class="string">&#x27;http://项目主页地址.com&#x27;</span></span><br><span class="line"><span class="attr">publish_to:</span> <span class="string">&#x27;http://localhost:9090&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">sdk:</span> <span class="string">&quot;&gt;=2.7.0 &lt;3.0.0&quot;</span></span><br><span class="line">  <span class="attr">flutter:</span> <span class="string">&quot;&gt;=1.17.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_test:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">flutter:</span></span><br></pre></td></tr></table></figure><p>配置好之后,可以在本地直接依赖：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lk_dio:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">user/william/lk_dio</span></span><br></pre></td></tr></table></figure><p>当然也可以发布到我们的pub私服上，发布之前可以通过命令检查错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages pub publish --dry-run</span><br></pre></td></tr></table></figure><p>按照提示解决问题，然后发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages pub publish</span><br></pre></td></tr></table></figure><p>出现如下信息表明发布成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- lib</span><br><span class="line">|   &#x27;-- helloworld.dart</span><br><span class="line">|-- pubspec.yaml</span><br><span class="line">&#x27;-- test</span><br><span class="line">    &#x27;-- helloworld_test.dart</span><br><span class="line"></span><br><span class="line">Looks great! Are you ready to upload your package (y/n)? y</span><br><span class="line">Uploading...</span><br><span class="line">Successfully uploaded package.</span><br></pre></td></tr></table></figure><p>但是如果不FQ，是一定不会成功的，你看到的将是如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pub needs your authorization to upload packages on your behalf.</span><br></pre></td></tr></table></figure><p>失败的原因就是需要google的认证，怎么办，fq? 有没有更好的办法？</p><h2 id="绕过google认证"><a href="#绕过google认证" class="headerlink" title="绕过google认证"></a>绕过google认证</h2><p>再clone<a href="https://gitee.com/william198824/pub">这个项目</a>之后<code>flutter pub get</code>，然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart --snapshot=mypub.dart.snapshot bin/pub.dart </span><br></pre></td></tr></table></figure><p>完事后会自动生成一个<code>mypub.dart.snapshot</code>。</p><p>复制之后放入${flutterSDK Path}/bin/cache/dart-sdk/bin/snapshots/ 目录下</p><p>用txt编辑器打开${flutterSDK Path}/bin/cache/dart-sdk/bin/pub文件，将倒数第三行的：<code>pub.dart.snapshot</code> 替换为 <code>mypub.dart.snapshot</code>,然后重新发布package就OK了。</p><h2 id="依赖自己的package"><a href="#依赖自己的package" class="headerlink" title="依赖自己的package"></a>依赖自己的package</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">lk_dio:#这里要与之前一致</span></span><br><span class="line">  <span class="attr">hosted:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lk_dio</span> <span class="comment">#这里要与之前一致</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:9090</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">^1.0.0</span></span><br></pre></td></tr></table></figure><p>添加了依赖之后，我<code>flutter pub get</code>，本机没问题，项目正常跑，万分激动，但是。。。</p><p>当我把server发布到公司服务器后，<strong>publish失败！</strong>经查，是运维没有开放9090端口，找过运维之后问题解决。</p><p>然后我再添加依赖，运行pub get，竟然卡住不动了，内心瞬间一万只草泥马德，上传可以下载就不行怪了！后来发现server的配置文件中有个配置：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行模式</span></span><br><span class="line">  parser.addFlag(<span class="string">&#x27;standalone&#x27;</span>, abbr: <span class="string">&#x27;s&#x27;</span>, defaultsTo: <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p><code>standalone</code>好像是独立部署的意思。</p><p>把这里的<code>defaultTo</code>的值改为<code>true</code>,重新部署、启动，再重新下载依赖pub get，等等足足71秒后竟然成功了！后来运维解释，之所以这么慢是因为从北京访问我们盐城的服务器，而且没有CDN加速。</p><h2 id="鸣谢："><a href="#鸣谢：" class="headerlink" title="鸣谢："></a>鸣谢：</h2><p><a href="https://www.jianshu.com/p/59f4778864f0">https://www.jianshu.com/p/59f4778864f0</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;事情的起因是，在工作项目中，一开始只有我一个人研发，为了方便，我封装了一个网络访问层。但是随着团队规模的拓展，陆续加入了其他人，时间紧项目重，所以后续的伙伴没有时间来问我这个框架怎么使用，所以他们直接上手改了我的封装！但是后期架构要求加入oauth2.0机制，所以需要全局处理token的有效认证，并且自动刷新token。为了满足这一需求，我需要重新编写网络层，同时为了避免伙伴修改我的抽象，我想到了本文的主题——搭建个pub.dev私服吧！&lt;/p&gt;</summary>
    
    
    
    <category term="technology" scheme="https://vee-zhang.github.io/Vee-blog/categories/technology/"/>
    
    
    <category term="pub" scheme="https://vee-zhang.github.io/Vee-blog/tags/pub/"/>
    
    <category term="flutter" scheme="https://vee-zhang.github.io/Vee-blog/tags/flutter/"/>
    
    <category term="dart" scheme="https://vee-zhang.github.io/Vee-blog/tags/dart/"/>
    
  </entry>
  
</feed>
